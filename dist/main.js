!function(e,r){for(var t in r)e[t]=r[t]}(exports,function(e){var r={};function t(o){if(r[o])return r[o].exports;var n=r[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=e,t.c=r,t.d=function(e,r,o){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)t.d(o,n,function(r){return e[r]}.bind(null,n));return o},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=1)}([function(e,r){Game.spawns.Spawn1.memory.queue=[],e.exports={add:e=>{const{queue:r}=Game.spawns.Spawn1.memory;r.filter(r=>r.key===e.key).length||r.push(e)},tick:()=>{const e=Game.spawns.Spawn1;if(!e.spawning){e.memory.processing&&(e.memory.queue.shift(),e.memory.processing=!1);const r=e.memory.queue.sort((e,r)=>e-r)[0];r&&(e.createCreep(r.body,r.name,r.memory),e.memory.processing=!0)}}}},function(e,r,t){const o=t(2);e.exports.loop=function(){o()}},function(e,r,t){const o=t(3),n=t(5),a=t(7),s=t(0);e.exports=()=>{const{harvesters:e,upgraders:r}=a();s.tick(),o.tick(e),n.tick(r)}},function(e,r,t){const o=t(4);e.exports={tick:function(e){const{creeps:r}=Game,t=Object.values(r).filter(e=>"harvester"===e.memory.role);t.length<e&&o.spawn(t.length),t.forEach(e=>{o.tick(e)})}}},function(e,r,t){const o=t(0);e.exports={spawn:e=>{o.add({key:`harvester-${e}`,name:`harvester-${e}`,body:[MOVE,WORK,CARRY],memory:{role:"harvester"},priority:1})},tick:e=>e.carry.energy<e.carryCapacity?(e=>{const r=e.room.find(FIND_SOURCES)[0];e.harvest(r)===ERR_NOT_IN_RANGE&&e.moveTo(r)})(e):(e=>{const r=Game.spawns.Spawn1;e.transfer(r,RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r)})(e)}},function(e,r,t){const o=t(6);e.exports={tick:function(e){const{creeps:r}=Game,t=Object.values(r).filter(e=>"upgrader"===e.memory.role);t.length<e&&Object.values(r).length&&o.spawn(t.length),t.forEach(e=>{o.tick(e)})}}},function(e,r,t){const o=t(0),n=e=>{const r=e.room.controller;e.upgradeController(r)===ERR_NOT_IN_RANGE&&e.moveTo(r)};e.exports={spawn:e=>{o.add({key:`upgrader-${e}`,name:`upgrader-${e}`,body:[MOVE,WORK,CARRY],memory:{role:"upgrader"},priority:2})},tick:e=>{e.carry.energy||(e.memory.task="withdraw"),e.carry.energy<e.carryCapacity?("withdraw"===e.memory.task&&(e=>{const r=Game.spawns.Spawn1;e.withdraw(r,RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r)})(e),"upgrade"===e.memory.task&&n(e)):(e.memory.task="upgrade",n(e))}}},function(e,r){e.exports=()=>{const{creeps:e}=Game,r=Object.values(e).filter(e=>"harvester"===e.memory.role).length;return{harvesters:3*(Object.values(e).filter(e=>"upgrader"===e.memory.role).length+1),upgraders:Math.floor(r/3)}}}]));